#################################################################################################################################
#
# Workflow Description:
#     Check the version info to judge whether it should activate to deploy or not.
#
# Workflow input parameters:
#     * working-directory: The working directory for this CI running.
#     * run_with_python_version: The Python version you want to use in this workflow.
#     * library-name: The target library name for checking the version info.
#     * library-source-code-path: The source code path of target library to check.
#     * library-default-version: The default value of software version if it cannot get the software version info from installed library.
#
# Workflow running output:
#     * version_update_state: the checking result for judging deployment.
#         * VERSION UPDATE: Version info has been changed. It would activate to run deployment process.
#         * NO VERSION UPDATE: Version info doesn't change. It won't do anything.
#
#     * Upload-Artifact:
#         * N/A
#
#################################################################################################################################

name: Check the version update state

on:
  workflow_call:
    inputs:
      working-directory:
        description: "The working directory for this CI running."
        required: false
        type: string
        default: './'
      run_with_python_version:
        description: "The Python version you want to use in this workflow."
        type: string
        required: false
        default: '3.12'
      library-name:
        description: "The target library name for checking the version info."
        required: true
        type: string
        default: ''
      library-source-code-path:
        description: "The source code path of target library to check."
        required: true
        type: string
        default: ''
      library-default-version:
        description: "The default value of software version if it cannot get the software version info from installed library."
        required: false
        type: string
        default: '0.0.0'
    outputs:
      version_update_state:
        description: "The version update state."
        value: ${{ jobs.run_test_items.outputs.version_update_state }}

jobs:
  run_test_items:
    runs-on: ubuntu-latest
    outputs:
      version_update_state: ${{ steps.checking_version_update_state.outputs.version_update_state }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all shell scripts for checking input parameters
        working-directory: ${{ inputs.working-directory }}
        run: |
          echo "Download shell script for installing library ..."
          curl https://raw.githubusercontent.com/Chisanan232/GitHub-Action_Reusable_Workflows-Python/develop/scripts/ci/install_library.py --output ./scripts/ci/install_library.py
          echo "Download shell script for generating software version value ..."
          curl https://raw.githubusercontent.com/Chisanan232/GitHub-Action_Reusable_Workflows-Python/develop/scripts/ci/generate-software-version.sh --output ./scripts/ci/generate-software-version.sh
          echo "Download shell script for checking the deployment state ..."
          curl https://raw.githubusercontent.com/Chisanan232/GitHub-Action_Reusable_Workflows-Python/develop/scripts/ci/deployment_checking.py --output ./scripts/ci/deployment_checking.py

      - name: Install Python ${{ inputs.run_with_python_version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ inputs.run_with_python_version }}

      - name: Install ${{ inputs.library-name }} from PyPI
        working-directory: ${{ inputs.working-directory }}
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -U pip
          python3 ./scripts/ci/install_library.py --library '${{ inputs.library-name }}'
          pip3 list

      - name: Check deployment state by software versino info
        id: checking_version_update_state
        working-directory: ${{ inputs.working-directory }}
        run: |
          script_running_result=$(python3 ./scripts/ci/deployment_checking.py)
          echo "🧾 Python project version update state: $script_running_result"

          version_update_result=$(echo "$script_running_result" | grep -E "\[INFO\] ((VERSION UPDATE)|(NO VERSION UPDATE))" | grep -E -o "((VERSION UPDATE)|(NO VERSION UPDATE))")
          echo "🧑‍💻 Truly version state: $version_update_result"

          echo "version_update_state=$(echo $version_update_result)" >> $GITHUB_OUTPUT
        env:
          PyPI_LIBRARY_NAME: ${{ inputs.library-name }}
          LIBRARY_SOURCE_CODE_PATH: ${{ inputs.library-source-code-path }}
          DEFAULT_VERSION: ${{ inputs.library-default-version }}
